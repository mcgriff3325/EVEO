(function($) {

var root = this, //window or global

	// aliases for rest calls
 	_get = $.wrest.get,
	_put = $.wrest.put,
	_post = $.wrest.post,
	_del = $.wrest.del,

	// default keys to use with _match
	defaultKeys = {
		items : "value",
		data : "name",
		links : 'rel',
		queries : 'rel'
	},

	// function to use to validate templates
	defaults = {
		// function to call to validate template
 		validator : defaultValidate
 	},

	emptyCollection = {
		collection : {
			href : '',
			version : "1.0"
		}
	},

	// methods constants
	GET = 'get',
	PUT = 'put',
	POST = 'post',
	DEL = 'delete';

root.CJ = root.CJ || {};


function extend(that, base, mixin) {
	that.prototype = Object.create(base.prototype);
	that.prototype.constructor = that;
	if (mixin)
		$.extend(that.prototype, mixin);
}

function isRegex(arg){
	return arg instanceof RegExp;
}

function isPrimitive(arg) {
	var type = typeof arg;
	return arg === null || (type != "object" && type != "function");
}

function isString(a) {
	return typeof a === 'string';
}

function isNumber(a) {
	return typeof a === 'number';
}

function isBoolean(a) {
	return typeof a === 'boolean';
}

function isArray(a) {
    return (!!a) && (a.constructor === Array);
}

function isObject(a) {
    return (!!a) && (a.constructor === Object);
}

function isFunction(a) {
    return (!!a) && (a.constructor === Function);
}

function _encode(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, escape);
}

function arrayOfClass(items, clazz) {
	return items.map(function(item){
		return new clazz(item);
	});
}


function defaultValidate(tmpl, tmplDef, coll) {
	var done = $.Deferred(), xhr, errs;

	// just make sure all fields in data exist in tmpl
	errs = tmpl.data.some(function(i){
		if (!_fieldByName(tmplDef.data, i.name)) {
			coll.error({
				title : 'Invalid Field',
				message : "Field '"+i.name+"' is an invalid field for this template"
			});
			return true;
		}
		return false;
	});

	if (errs) {
		xhr = _makeMockXHR(400);
		done.rejectWith(xhr, [coll, xhr]);
	} else {
		xhr = _makeMockXHR(200);
		done.resolveWith(xhr, [tmpl, tmplDef, coll, xhr]);
	}

	return done.promise();
}


/**
 * Filters an array to match a set of given criteria.
 *
 * @param defaultKey - A literal object where which contains a string
 * key for every potential path from the objects in this and a string
 * value indicating the property name for the default key for that
 * path. The root path is indicated by the key '_'.
 * @param [path] - Optional. A '.' separated path at which criteria
 * will be applied.
 * @param criteria - The criteria to determine an item in 'this'
 * matches and should be returned.  Criteria may be specified as
 * follows:
 * <ul>
 * <li>String to compare to value of defaultKey</li>
 * <li>An array of strings to compare to defaultKey. An item is
 * deemed to match if it's default key matches any string</li>
 * <li>A literal object to compare to each item.  An item is deemed
 * to match if all the properties in the literal object match the
 * corresponding properties in the item</li>
 * <li>An array of literal objects to compare to each item. An item
 * is deemed to match if all the properties of any given literal
 * object match the corresponding properties in the item.</li>
 * <li>A function which returns true when an item matches.  The
 * function will be passed the item to test as its only parameter</li>+
 * </ul>
 * @returns Array of items matching criteria
 */
function _match(arr, defaultKey, path, criteria) {
	var c;

	arr = arr || [];

	if (!criteria) { // got match criteria, but no path
		criteria = path;
		path = undefined;
	}

	// short circuit if we don't have criteria or an array
	if (!criteria || !arr.length) return arr;

	// if !defaultKey and criteria is a primitive or array of primitives
	// this is an error, so return empty array
	if (!defaultKey	&&
			((isArray(criteria) && criteria.length && !isObject(criteria[0])) ||
				isPrimitive(criteria)) )
		return [];

	// normalize non-function criteria into array of objects

	// if we have an array of primitives (array of not objects)
	// convert each primitive into an object where key is defaultKey
	if (isArray(criteria) && criteria.length && !isObject(criteria[0]))
		criteria = criteria.map(function(primitive) {
			c = {};
			c[defaultKey] = primitive;
			return c;
		});

	// in the normalized form, do nothing
	else if (isArray(criteria) && criteria.length && isObject(criteria[0]))
		;

	// if we have a single object make that an array of 1
	else if (isObject(criteria))
		criteria = [criteria];

	// we have a function, so do nothing
	else if (isFunction(criteria))
		;

	// by process of elimination we have a single primitive
	else {
		c = {};
		c[defaultKey] = criteria;
		criteria = [c];
	}


	return arr.filter(function(item){

		function matchProps(props, array) {
			var matched, key;

			/* jshint loopfunc : true */
			for (key in props) {
				matched = array.some(function(obj){
					var l = props[key], r = obj[key];
					return isRegex(l) ? !!l.exec(r) : l === r;
				});
				if (!matched) return false;
			}
			return true;
		}

		var	toCheck = item,
			parts = path && path.split('.') || null;

		// get the object to check against
		if (parts) {
			toCheck = parts.reduce(function(prev, prop) {
				return prev[prop];
			}, item);
		}

		// given a function, so just use that
		if (isFunction(criteria)) {
			return criteria(toCheck);
		} else {
			// normalize toCheck to be an array
			if (!isArray(toCheck))
				toCheck = [toCheck];

			// compare each criteria value against each toCheck
			return criteria.some(function(val){
				return matchProps(val, toCheck);
			});
		}

	});

}


function _fieldByName(data, name) {
	var i=0;

	data = data || [];

	for (i=0; i < data.length; i++) {
		if (data[i].name === name) {
			return data[i];
		}
	}
	return null;
}


/**
 * Wraps an array of objects
 * @param  {[type]} wrapper    Class to instantiate to wrap objects
 * @param  {[type]} coll       CJ.Collection instance to which what belongs
 * @param  {[type]} what       Array of raw objects to wrap
 * @param  {[type]} clazz      Clazz to instantiate to wrap items in what if
 *                             default builder is used
 * @param  {[type]} defaultKey Default key to use when filtering
 * @param  {[type]} [builder]  Optional function called to instantiate objects
 *                             in what.  See _itemBuilder
 * @return {[type]}            returns a new wrapped instance
 */
function _wrap(wrapper, coll, what, clazz, defaultKey, builder) {
	return new wrapper(coll, what, clazz, defaultKey, builder);
}

/**
 * Creates a wrapper around an array of items.
 * @param what Array of items to wrap
 * @param clazz The class to instantiate when an individual item
 * is retrieved.  clazz should be a constructor that takes a single
 * parameter that is a literal object representing the item.
 * @param defaultKey Literal object where key is path from root
 * of objects in what to string value indicating default string
 * comparison.
 */
function Wrapped (coll, what, clazz, defaultKey, builder) {
	this._coll = coll; // containing collection
	this._what = what || [];
	this._clazz = clazz;
	this._defaultKey = defaultKey;
	this.length = what && what.length || 0;
	this._builder = builder || CJ.itemBuilder;
}

/**
 * Default item builder.
 * @param  {[type]} clazz class to instantiate
 * @param  {[type]} what  raw object to instantiate item
 * @param  {[type]} coll  CJ.Collection object item is a member of
 * @return {[type]}       If what is null, a raw item properly initialized.
 *                        If what is not null, an instance of clazz.
 */
function _itemBuilder(clazz, what, coll) {
	if (what)
		return clazz ? new clazz(what, coll) : what;
	else
		return {};
}

extend(Wrapped, Object, {

	coll : function() {
		return this._coll;
	},

	toObject : function() {
		return this._what;
	},

	match : function () {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		return _wrap(
				this.constructor,
				this._coll,
				_match.apply(this, args.unshift(this._what, this._defaultKey)),
				this._clazz);
	},

	first : function () {
		return this._what && this._what.length ?
				this._builder(this._clazz, this._what[0], this.coll()) :
				null;
	},

	last : function () {
		return this._what && this._what.length ?
				this._builder(this._clazz, this._what[this._what.length-1], this.coll()) :
				null;
	},

	get : function (i) {
		return this._what && this._what.length && i < this._what.length ?
				this._builder(this._clazz, this._what[i], this.coll()) :
				null;
	},

	insert : function(idx, item) {
		var i = this._what.length,
			obj = this._builder(this._clazz, null, this.coll());

		if (arguments.length === 1) {
			// either idx specified, using empty item
			// or object specified, using append for idx
			i = isNumber(idx) ? idx : this._what.length;
			obj = isObject(idx) ? idx : obj;
		} else if (arguments.length === 2) {
			i = idx;
			obj = item;
		} else if (arguments.length !== 0)
			throw 'invalid arguments: insert([idx (number)], [item (object)])';

		this._what = this._what || [];
		this._what.splice(i,0,obj);
		this.length = this._what.length;
		return this;
	},

	remove : function(idx, num) {

		if (idx === undefined) {
			idx = this._what.length - 1;
		}

		num = num || 1;

		if (idx < this._what.length)
			this._what.splice(idx,num);

		this.length = this._what.length;
		return this;
	},

	empty : function () {
		while (this.length)
			this.pop();
	}

});

// Add all array functions to Wrapped

['pop', 'shift', 'splice'].forEach(function(name) {
  var method = Array.prototype[name];
  Wrapped.prototype[name] = function() {
    var ret = method.apply(this._what, arguments);
    this.length = this._what.length;
    return ret;
  };
});

['push', 'unshift'].forEach(function(name) {
  var method = Array.prototype[name];
  Wrapped.prototype[name] = function() {
    this.length = method.apply(this._what, arguments);
    return this.length;
  };
});

['reverse'].forEach(function(name) {
  var method = Array.prototype[name];
  Wrapped.prototype[name] = function() {
    method.apply(this._what, arguments);
    return this;
  };
});

['sort'].forEach(function(name) {
	var method = Array.prototype[name];
	Wrapped.prototype[name] = function() {

		function wrapItem(func, clazz, coll, builder) {
			return function() {

			  	// careful not to leak arguments, so that V8 will optimized
				var args = new Array(arguments.length), i;

				for(i = 0; i < args.length; ++i) {
					args[i] = arguments[i];
				}

				args[0] = builder(clazz, args[0], coll);
				args[1] = builder(clazz, args[1], coll);
				return func.apply(this, args);
			};
		}


	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// replace the function with a wrapping function that will
		// covert the raw object into the expected wrapped object
		args[0] = wrapItem(args[0], this._clazz, this.coll(), this._builder);

		method.apply(this._what, args);

		return this;
	};
});

['concat', 'slice'].forEach(function(name) {
	var method = Array.prototype[name];
	Wrapped.prototype[name] = function() {
    return _wrap(
    		this.constructor,
    		this.coll(),
    		method.apply(this._what, arguments),
    		this._clazz,
    		this._defaultKey);
	};
});

['forEach', 'filter'].forEach(function(name){
	var method = Array.prototype[name];
	Wrapped.prototype[name] = function() {

		function wrapItem(func, clazz, coll, builder) {
			return function() {

			  	// careful not to leak arguments, so that V8 will optimized
				var args = new Array(arguments.length), i;

				for(i = 0; i < args.length; ++i) {
					args[i] = arguments[i];
				}

				args[0] = builder(clazz, args[0], coll);
				args[2] = args[2].map(function(i){
					return builder(clazz, i, coll);
				});
				return func.apply(this, args);
			};
		}


	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// replace the function with a wrapping function that will
		// covert the raw object into the expected wrapped object
		args[0] = wrapItem(args[0], this._clazz, this.coll(), this._builder);

		return _wrap(
			this.constructor,
			this.coll(),
			method.apply(this._what, args),
			this._clazz,
			this._defaultKey);
	  };
});


['map', 'some', 'every'].forEach(function(name){
	var method = Array.prototype[name];
	Wrapped.prototype[name] = function() {

		function wrapItem(func, clazz, coll, builder) {
			return function() {

			  	// careful not to leak arguments, so that V8 will optimized
				var args = new Array(arguments.length), i;

				for(i = 0; i < args.length; ++i) {
					args[i] = arguments[i];
				}

				args[0] = builder(clazz, args[0], coll);
				args[2] = args[2].map(function(i){
					return builder(clazz, i, coll);
				});
				return func.apply(this, args);
			};
		}


	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// replace the function with a wrapping function that will
		// covert the raw object into the expected wrapped object
		args[0] = wrapItem(args[0], this._clazz, this.coll(), this._builder);

		return method.apply(this._what, args);
	  };
});

['reduce', 'reduceRight'].forEach(function(name){
	var method = Array.prototype[name];
	Wrapped.prototype[name] = function() {

		function wrapItem(func, clazz, coll, builder) {
			return function() {

			  	// careful not to leak arguments, so that V8 will optimized
				var args = new Array(arguments.length), i;

				for(i = 0; i < args.length; ++i) {
					args[i] = arguments[i];
				}

				args[1] = builder(clazz, args[1], coll);
				args[3] = args[3].map(function(i){
					return builder(clazz, i, coll);
				});
				return func.apply(this, args);
			};
		}


	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// replace the function with a wrapping function that will
		// covert the raw object into the expected wrapped object
		args[0] = wrapItem(args[0], this._clazz, this.coll(), this._builder);

		return method.apply(this._what, args);
	  };
});



/**
 * Creates a new CJ Collection instance.  Pass a CJ compliant
 * string, object, or URL that when retrieved via GET returns CJ
 * compliant response.  If a URL is passed the URL will NOT be
 * fetched immediately.  A subsequent call to .get() is necessary.
 * @param coll
 * @returns
 */
function Collection(coll) {
	var string = isString(coll);

	if (!coll) // empty collection
		this._coll = emptyCollection;
	else if (string) {
		// see if its a json string
		try {
			this._coll = JSON.parse(coll);
		} catch (e) {
			// its not json, so we happily assume its an href
			// yes this isn't always a valid assumption, but
			// sometimes we just assume gigo
			this._coll = { collection : { href : coll } };
		}
	} else if (isObject(coll))
		this._coll = coll;
	else throw 'invalid argument to constructor. must be url, JSON string, or object literal';


	// TODO: refactor to eliminate _root
	this._root = this._coll;
	this._coll = this._coll.collection;
}

extend(Collection, Object, {

	toObject : function() {
		return this._root;
	},

	href : function(href) {
		if (arguments.length === 0)
			return this._coll.href;
		else
			this._coll.href = href;
	},

	version : function(version) {
		if (arguments.length === 0)
			return this._coll.version;
		else
			this._coll.version = version;
	},

	toString : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		args.unshift(this._root);
		return JSON.stringify.apply(this,args);
	},

	get : function(o) {
		var url = this._coll.href,
			done = $.Deferred();

		_get(url,o).then(function(data, textStatus, xhr, o) {
			// on success
			done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();
	},

	refresh : function(o) {
		var self = this,
			url = this._coll.href,
			done = $.Deferred();

		_get(url,o).then(function(data, textStatus, xhr, o) {
			// on success
			// TODO: handle href, version
			self._root = data; // TODO: is this already parsed into object?
			self._coll = self._root.collection;
			done.resolveWith(this, [self, xhr]); // this is  'XHR'
		}).fail(function(xhr, textStatus, error, data, o) {
			self._root = data;
			self._coll = self._root.collection;
			done.rejectWith(this, [self, xhr]);
		});

		return done.promise();
	},

	items : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// init to empty array if not defined
		this._coll.items = this._coll.items || [];

		args.unshift(
				this._coll.items,
				defaultKeys.items,
				arguments.length === 0 ? undefined : 'data');
		return _wrap(
				CJ.Wrapped,
				this,
				_match.apply(this, args),
				CJ.Item,
				defaultKeys.items);
	},

	links : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// init to empty array if not defined
		this._coll.links = this._coll.links || [];

		args.unshift(this._coll.links, defaultKeys.links);
		return _wrap(CJ.Wrapped, this, _match.apply(this, args), CJ.Link);
	},

	queries : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		// init to empty array if not defined
		this._coll.queries = this._coll.queries || [];

		args.unshift(this._coll.queries, defaultKeys.queries);
		return _wrap(CJ.Wrapped, this, _match.apply(this, args), CJ.Query);
	},

	error : function(error) {
		if (!arguments.length)
			return this._coll.error;
		else
			this._coll.error = error;
	},

	template : function() {
		return new CJ.Template(this._coll.template, this, POST, this.href(), []);
	}

});


/**
 * Creates an Item instance of a CJ Collection.  Items can be updated
 * deleted, and refreshed.
 * @param item
 * @returns
 */
function Item(item, coll) {
	this._item = item;
	this._coll = coll;
}

extend(Item, Object, {

	coll : function(coll) {
		if (!arguments.length)
			return this._coll;
		else this._coll = coll;
	},

	toObject : function() {
		return this._item;
	},

	toString : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		args.unshift(this._item);
		return JSON.stringify.apply(this,args);
	},

	href : function(href) {
		if (!arguments.length)
			return this._item.href;
		else this._item.href = href;
	},

	rel : function(rel) {
		if (!arguments.length)
			return this._item.rel;
		else this._item.rel = rel;
	},

	rt : function(rt) {
		if (!arguments.length)
			return this._item.rt;
		else this._item.rt = rt;
	},

	links : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}
		args.unshift(this._item.links, defaultKeys.links);
		return _wrap(CJ.Wrapped, this.coll(), _match.apply(this, args), CJ.Link);
	},

	data : function() {
		var propname, props, key, field;

	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		if (args.length < 2) {
			args.unshift(this._item.data, defaultKeys.data);
			return _wrap(CJ.Wrapped, this.coll(), _match.apply(this, args), CJ.Data, defaultKeys.data);
		} else {
			// short cut to update props of form
			// propname, { name : newname, value : newvalue, prompt : newprompt}
			propname = args[0];
			props = args[1];

			// normalize if necessary
			if (!isObject(props)) {
				props = {
					name : propname,
					value : props
				};
			}

			field = _fieldByName(this._item.data, propname);
			if (field) {
				for (key in props) {
					field[key] = props[key];
				}
			} else {
				this._item.data.push(props);
			}

			return this;
		}
	},

	template : function() {
		return new CJ.Template(
				this.coll().template().toObject(),
				this.coll(),
				this._item.href ? PUT : POST,
				this._item.href,
				this._item.data);
	},

	del : function(opts) {
		var done = $.Deferred();

		_del(this._item.href, opts).then(function(data, textStatus, xhr, o) {
			done.resolveWith(this, [new CJ.Collection(data), xhr]);
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();
	},

	get : function(o) {
		var done = $.Deferred();

		_get(this._item.href,o).then(function(data, textStatus, xhr, o) {
			done.resolveWith(this, [new CJ.Collection(data), xhr]);
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});
		return done.promise();
	},

	refresh : function (o) {
		var self = this, done = $.Deferred();

		_get(this._item.href,o).then(function(data, textStatus, xhr, o) {
			var items = self._coll.items,
				i = items.length;
				newItem = data.collection.items[0];

			while (i--) {
				if (items[i].href == self.href)
					items[i] = newItem;
			}

			done.resolveWith(this, [new CJ.Collection(self._coll), xhr]);
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});
		return done.promise();
	}

});

function Link(link, coll) {
	this._link = link;
	this._coll = coll;
}

extend(Link, Object, {

	toObject : function() {
		return this._link;
	},

	rel : function(val) {
		if (!arguments.length)
			return this._link.rel;
		else
			this._link.rel = val;
		return this;
	},

	href : function(val) {
		if (!arguments.length)
			return this._link.href;
		else
			this._link.href = val;
		return this;
	},

	rt : function(val) {
		if (!arguments.length)
			return this._link.rt;
		else
			this._link.rt = val;
		return this;
	},

	prompt : function(val) {
		if (!arguments.length)
			return this._link.prompt;
		else
			this._link.prompt = val;
		return this;
	},

	get : function(o) {
		var url = this._link.href,
			done = $.Deferred();

		_get(url, o).then(function(data, textStatus, xhr, o) {
			// on success
			done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();

	},

	put : function(o) {
		var url = this._link.href,
			done = $.Deferred();

		_put(url, o).then(function(data, textStatus, xhr, o) {
			if (xhr.status === 204) // no content requries special handling
				done.resolveWith(this, [undefined, xhr]);
			else
				done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();

	},

	post : function(o) {
		var url = this._link.href,
			done = $.Deferred();

		_post(url, o).then(function(data, textStatus, xhr, o) {
			if (xhr.status === 204) // no content requries special handling
				done.resolveWith(this, [undefined, xhr]);
			else
				done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();

	},

	del : function(o) {
		var url = this._link.href,
			done = $.Deferred();

		_del(url, o).then(function(data, textStatus, xhr, o) {
			if (xhr.status === 204) // no content requries special handling
				done.resolveWith(this, [undefined, xhr]);
			else
				done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();

	}

});

function Query(query, coll) {
	this._query = query;
	this._coll = coll;
}

extend(Query, Object, {

	coll : function(coll) {
		if (!arguments.length)
			return this._coll;
		else this._coll = coll;
	},

	toObject : function() {
		return this._query;
	},

	name : function(val) {
		if (!arguments.length)
			return this._query.name;
		else
			this._query.name = val;
		return this;
	},

	rel : function(val) {
		if (!arguments.length)
			return this._query.rel;
		else
			this._query.rel = val;
		return this;
	},

	href : function(val) {
		if (!arguments.length)
			return this._query.href;
		else
			this._query.href = val;
		return this;
	},

	rt : function(val) {
		if (!arguments.length)
			return this._query.rt;
		else
			this._query.rt = val;
		return this;
	},

	prompt : function(val) {
		if (!arguments.length)
			return this._query.prompt;
		else
			this._query.prompt = val;
		return this;
	},

	get : function(vals, o) {
		var url = this._query.href,
			done = $.Deferred(),
			params = '';

		// resolve params using vals
		if (this._query.data && this._query.data.length) {
			this._query.data.forEach(function(d){
				if (vals && vals[d.name] !== undefined)
					params += _encode(d.name) + '=' + _encode(vals[d.name]) + '&';
				else if (d.value)
					params += _encode(d.name) + '=' + _encode(d.value) + '&';
			});
		}

		if (params)
			url = url + (url.indexOf('?') < 0 ? '?' : '&') + params.substring(0, params.length-1);

		_get(url, o).then(function(data, textStatus, xhr, o) {
			// on success
			done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();

	},

	data : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		if (args.length < 2) {
			args.unshift(this._query.data, defaultKeys.data);
			return _wrap(CJ.Wrapped, this.coll(), _match.apply(this, args), CJ.Data, defaultKeys.data);
		} else {
			// TODO: throw? read only here?
		}
	}

});


/**
 * Creates a template instance of a CJ Collection
 */
function Template(tmpl, coll, method, href, data) {
	this._tmpl = $.type(tmpl) === 'string' ? JSON.parse(tmpl) : $.extend(true, {}, tmpl);
	this._def = $.extend(true, {}, this._tmpl); // make another immutable copy
	this._method = method || POST;
	this._coll = coll;
	this._href = href || (coll && coll.href());

	data = data || [];

	// add data values to tmpl
	data.forEach(function(d){
		var f = _fieldByName(this._tmpl.data, d.name);
		if (f)
			f = $.extend(true, f, d);
	}, this);
}

extend(Template, Object, {

	coll : function(coll) {
		if (!arguments.length)
			return this._coll;
		else this._coll = coll;
	},

	href : function(href) {
		if (!arguments.length)
			return this._href;
		else this._href = href;
	},

	method : function(method) {
		if (!arguments.length)
			return this._method;
		else this._method = method;
	},

	toObject : function() {
		return this._tmpl;
	},

	toString : function() {
	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		args.unshift(this._tmpl);
		return JSON.stringify.apply(this,args);
	},

	data : function() {
		var propname, props, key, field;

	  	// careful not to leak arguments, so that V8 will optimized
		var args = new Array(arguments.length), i;

		for(i = 0; i < args.length; ++i) {
			args[i] = arguments[i];
		}

		if (args.length < 2) {
			[].unshift.call(args, this._tmpl.data, defaultKeys.data);
			return _wrap(CJ.Wrapped, this.coll(), _match.apply(this, args), CJ.TemplateData, defaultKeys.data);
		} else {
			// short cut to update props of form
			// propname, { name : newname, value : newvalue, prompt : newprompt}
			propname = args[0];
			props = args[1];

			// normalize if necessary
			if (!isObject(props)) {
				props = {
					name : propname,
					value : props
				};
			}

			field = _fieldByName(this._tmpl.data, propname);
			if (field) {
				for (key in props) {
					field[key] = props[key];
				}
			} else {
				this._tmpl.data.push(props);
			}

			return this;
		}
	},

	submit : function (method, o) {
		var defaultOpts = {
				data : {
					template : this.toObject()
				}
			},
			opts,
			deferred,
			done = $.Deferred();

		opts = $.extend(true, {}, defaultOpts, isObject(method) ? method : o || {});
		method = isString(method) ? method : this._method;

		deferred = method.toLowerCase() == POST ?
				_post(opts.href || this._href, opts) :
				_put(opts.href || this._href, opts);

		deferred.then(function(data, textStatus, xhr, o) {
			if (xhr.status === 204) // no content requries special handling
				done.resolveWith(this, [undefined, xhr]);
			else
				done.resolveWith(this, [new CJ.Collection(data), xhr]); // 'this' is XHR
		}).fail(function(xhr, textStatus, error, data, o) {
			done.rejectWith(this, [new CJ.Collection(data), xhr]);
		});

		return done.promise();
	},

	validate : function (fn) {
		var self = this,
			valid = $.Deferred(),
			withData = this._tmpl,
			def = this._def,
			defValid = defaults.validator,
			doDefault = true,
			xhr = _makeMockXHR(200),
			coll = new CJ.Collection({
				collection : {
					href : "",
					version : "1.0"
				}
		    }),
		    start = $.Deferred();

		// TODO: this implementation assumes that errors will
		// always be a collection.error object.  Validation may
		// want to use an extension such as collection.errors
		// and as such should have the ability to just mutate the
		// collection that is to be returned.

		start = fn ? fn(withData,def,coll) : start.resolveWith(xhr,[withData,def,coll, xhr]);
		start.then(function(data, def, coll, xhr){
			return defValid(withData, def, coll);
		}).then(function(){
			valid.resolveWith(xhr, [self, xhr]);
		}).fail(function(coll, xhr){
			valid.rejectWith(xhr, [coll, xhr]);
		});

		return valid.promise();
	}

});

function Data(data, coll) {
	this._data = data;
	this._coll = coll;
}

extend(Data, Object, {

	coll : function(coll) {
		if (!arguments.length)
			return this._coll;
		else this._coll = coll;
	},

	toObject : function() {
		return this._data;
	},

	name : function(val) {
		if (!arguments.length)
			return this._data.name;
		else
			this._data.name = val;
		return this;
	},

	value : function(val) {
		if (!arguments.length)
			return this._data.value;
		else
			this._data.value = val;
		return this;
	},

	prompt : function(val) {
		if (!arguments.length)
			return this._data.prompt;
		else
			this._data.prompt = val;
		return this;
	}
});

function TemplateData(data, coll) {
	CJ.Data.call(this, data, coll);
}

extend(TemplateData, Data, {

});

function _makeMockXHR(status) {
	return {
		status: status,
		statusText: (status >= 200 && status <= 299) || status == 304 ? "SUCCESS" : "FAILURE",
		readyState: 4,
		open: function() { },
		send: function() { },
		abort: function() { },
		setRequestHeader: function(header, value) {	},
		getResponseHeader: function(header) { },
		getAllResponseHeaders: function() {	}
	};

}

/* example
var start = new Collection("http://foo");

start.get().then(function(coll) { // get always returns NEW CJ.Collection instance
	start === coll // false;
});
start.refresh().then(function(coll) { // xhr request parameter are passed as this so you can use or ignore
                                     // but by the time this fires, collection has been updated internally with the response

	start === coll // true;

	syntactic sugar effectively overloading
		- filter with string compare of default key
		- filter with compare of props of given object
		- filter with .some string compare of strings in given array
		- filter with .some compare of props in given array
		- filter with user function

	.match([path], criteria)
		where
		 	criteria - string compared to default key (but how can there be 1 default key with infinite paths?)
		 			 - array of strings compared to default key (contains) see above
		 			 - object comparing each property
		 			 - array of objects comparing each property
		 			 - function

	// NOTICE we are using 'coll' defined by the wrapping closure


	// all coll.items( ... ) === coll.items().where('data', ...)
	coll.items('foo'); // return Item for name === 'foo'
	coll.items({ name: 'foo', status: 10}); // return Item(s) with data.name == 'foo' and data.status == 10
	coll.items(['foo', 'bar']); // return Item(s) with data.name == 'foo' or data.name == 'bar';
	coll.items([{ name: 'foo', status: 1 }, { name : 'bar', status : 2 }]); // return Item(s) with (data.name == 'foo' and data.status == 1) or (data.name == 'bar' and data.status == 2)
	coll.items(function(item) { return item.data('foo').val() == 'bar' && item.links('next'); }); // use a function to test which items should be returned

	coll.items().match('data', { name : 'foo', status : 1 });
	coll.items().match('links', 'self');
	coll.items().match('links', 'next');
	coll.items().match('links', { rt : 'bar'});
	coll.items().match('links', function(link) { return rt == 'foo' and rel == 'bar'; });

	// create a template from the current status of the item with name
	// 'foo' changing it's name to 'bar', then set the 'status' to 20,
	// then update (put) and handle response, do not validate (update(false))
	coll.items('foo').template({name:'bar'}).data({status:20}).update(false).then(...)

	// create a template from the current status of the item with name
	// 'foo' changing it's name to 'bar', then set the 'status' to 20,
	// then update (put) and handle response
	// validate (update(true)) using registered validators
	// on validate fail, rejectWith( ... ), on validate success do put
	coll.items('foo').template({name:'bar'}).data({status:20}).update(true).then(...)

	// create a template from the current status of the item with name
	// 'foo' changing it's name to 'bar', then set the 'status' to 20,
	// then update (put) and handle response
	// validate (update(function(){...})) using passed function
	// on validate fail, rejectWith( ... ), on validate success do put
	coll.items('foo').template({name:'bar'}).data({status:20}).update(function(tmpl) { return tmpl.data('name') !== 'foo'; }).then(...)

	// explicit validation, returning deferred which is invoke for valid or not
	coll.items('foo').template({name:'bar'}).data({status:20}).validate().then( ...).fail( ... );


	// create a new empty template
	// initially populate with name = new
	// update foo property with value bar
	// update name = newnew, foo = bar bar
	// POST value (post chosen because template created not form existing item
	coll.template({ name : "new"}).data("foo", "bar").data({ name : "newnew", foo : 'barbar'}).update().then( .. ).fail( ... );

	// on success, get the first item
	return collection.items()[0].get();
}).then(function(collection) {
	// now we have the first item
	var item = collection.items()[0];
	item.href; // return http://foo
	item.val("foo", "bar"); // set foo = "bar"
	item.prompt("foo", "Foo"); // set prompt = "Foo"
	item.val("foo"); // return "bar"
	item.prompt("foo"); // return "Foo"
	item.val("foo", "zar") // set foo = zar
	item.val("foo"); // return "zar"
	item.val("other", "value").prompt("Other"); // add "other" with "value" and prompt "Other" to data
	item.val("other"); // return "value"
	item.prompt("other"); // return "Other"
	item.data(); // returns array of Data [ { name : "name", value : "foo", prompt : "Bar"}, { name : "other", value : "value", prompt : "Other"} ... ]
	item.data(true); // return Data as object literal excluding prompt { name : "foo", other : "value", ... }
	item.links(); // returns array of Link objects
	item.links('self'); // return Link object for rel === self
	item.links('self').href('http://bar'); // sets link href http://bar
	item.links.self().href(); // return self link href http://bar
	item.links.self().prompt(); // return prompt for self link
	item.links.self().name(); // return name for self link
	item.links.self().rt(); // return relation type for self link
	item.links.self().render(); // return render type for self link 'link' or 'image'
	item.links.next().get().then( ... ) ; // return a new cj collection represented by the 'next' relation

	item.get().then( ... ); // return a new cj collection representing this item;
	item.refresh().then( ... ); // get this item, and update it's representing within the current collection
	                // internally this must return it's own deferred, and on success update the collection

	return item.update(); // creates template and PUTs item to item.href

	// if no idx specified, append
	coll.items.insert(idx, {}).data("name", { value: 'foo'})
}).then(function(collection) {

})
*/


CJ.Wrapped = Wrapped;
CJ.Collection = Collection;
CJ.Item = Item;
CJ.Template = Template;
CJ.Query = Query;
CJ.Link = Link;
CJ.Data = Data;
CJ.TemplateData = TemplateData;

CJ.defaults = defaults;
CJ.defaultKeys = defaultKeys;

CJ._get = _get;
CJ._put = _put;
CJ._post = _post;
CJ._del = _del;

CJ.GET = GET;
CJ.PUT = PUT;
CJ.POST = POST;
CJ.DEL = DEL;

CJ.match = _match;
CJ.wrap = _wrap;
CJ.itemBuilder = _itemBuilder;
CJ.extend = extend;
CJ.isRegex = isRegex;
CJ.isPrimitive = isPrimitive;
CJ.isString = isString;
CJ.isNumber = isNumber;
CJ.isBoolean = isBoolean;
CJ.isArray = isArray;
CJ.isObject = isObject;
CJ.isFunction = isFunction;
CJ.makeMockXHR = _makeMockXHR;
CJ.fieldByName = _fieldByName;

})(jQuery);
